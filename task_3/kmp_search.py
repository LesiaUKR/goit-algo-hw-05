def compute_lps(pattern):
    lps = [0] * len(pattern)  # Ініціалізуємо список lps, де кожен елемент - 0, розміром як довжина патерну
    length = 0  # Довжина попереднього найкоротшого префіксного суфіксу
    i = 1  # Індекс для проходження по патерну

    while i < len(pattern):
        if pattern[i] == pattern[length]:  # Якщо символ патерну збігається з символом у префіксі
            length += 1  # Збільшуємо довжину префіксного суфіксу
            lps[i] = length  # Присвоюємо довжину lps[i]
            i += 1  # Переходимо до наступного символу патерну
        else:
            if length != 0:  # Якщо довжина не 0
                length = lps[length - 1]  # Встановлюємо length на попереднє значення lps
            else:
                lps[i] = 0  # Якщо довжина 0, встановлюємо lps[i] = 0
                i += 1  # Переходимо до наступного символу патерну

    return lps  # Повертаємо список lps

def kmp_search(main_string, pattern):
    M = len(pattern)  # Довжина патерну
    N = len(main_string)  # Довжина головного рядка

    lps = compute_lps(pattern)  # Обчислюємо список lps для патерну

    i = j = 0  # Індекси для проходження по головному рядку і патерну

    while i < N:
        if pattern[j] == main_string[i]:  # Якщо символи патерну і головного рядка збігаються
            i += 1  # Переходимо до наступного символу головного рядка
            j += 1  # Переходимо до наступного символу патерну

        elif j != 0:  # Якщо символи не збігаються і j не 0
            j = lps[j - 1]  # Встановлюємо j на попереднє значення lps

        else:
            i += 1  # Переходимо до наступного символу головного рядка

        if j == M:  # Якщо всі символи патерну були знайдені
            return i - j  # Повертаємо індекс початку знайденого підрядка

    return -1  # Якщо підрядок не знайдено, повертаємо -1